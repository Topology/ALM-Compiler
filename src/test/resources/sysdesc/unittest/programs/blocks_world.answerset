% Answer Set 1 of 1
{
 instance(t, points), instance(b1, block), instance(b2, block), instance(b3, block), instance(t, universe), instance(b1, points), instance(b1, agents), instance(b2, points), instance(b2, agents), instance(b3, points), instance(b3, agents), instance(b1, universe), instance(b1, things), instance(b2, universe), instance(b2, things), instance(b3, universe), instance(b3, things), instance(put(b2, b1), put), instance(put(b3, b1), put), instance(put(b1, b2), put), instance(put(b3, b2), put), instance(put(b2, b3), put), instance(put(b1, b3), put), instance(put(b1, t), put), instance(put(b2, t), put), instance(put(b3, t), put), instance(put(b2, b1), move), instance(put(b3, b1), move), instance(put(b1, b2), move), instance(put(b3, b2), move), instance(put(b2, b3), move), instance(put(b1, b3), move), instance(put(b1, t), move), instance(put(b2, t), move), instance(put(b3, t), move), instance(put(b2, b1), actions), instance(put(b3, b1), actions), instance(put(b1, b2), actions), instance(put(b3, b2), actions), instance(put(b2, b3), actions), instance(put(b1, b3), actions), instance(put(b1, t), actions), instance(put(b2, t), actions), instance(put(b3, t), actions), instance(put(b2, b1), universe), instance(put(b3, b1), universe), instance(put(b1, b2), universe), instance(put(b3, b2), universe), instance(put(b2, b3), universe), instance(put(b1, b3), universe), instance(put(b1, t), universe), instance(put(b2, t), universe), instance(put(b3, t), universe), -instance(false, move), -instance(b1, move), -instance(b2, move), -instance(b3, move), -instance(t, move), -instance(true, move), -instance(false, timeStep), -instance(put(b2, b1), timeStep), -instance(b1, timeStep), -instance(put(b2, b3), timeStep), -instance(b2, timeStep), -instance(put(b3, b1), timeStep), -instance(b3, timeStep), -instance(put(b1, t), timeStep), -instance(put(b2, t), timeStep), -instance(t, timeStep), -instance(put(b1, b3), timeStep), -instance(true, timeStep), -instance(put(b1, b2), timeStep), -instance(put(b3, t), timeStep), -instance(put(b3, b2), timeStep), -instance(false, universe), -instance(true, universe), -instance(false, things), -instance(put(b2, b1), things), -instance(put(b2, b3), things), -instance(put(b3, b1), things), -instance(put(b1, t), things), -instance(put(b2, t), things), -instance(t, things), -instance(put(b1, b3), things), -instance(true, things), -instance(put(b1, b2), things), -instance(put(b3, t), things), -instance(put(b3, b2), things), -instance(false, singleton_t_points___), -instance(put(b2, b1), singleton_t_points___), -instance(b1, singleton_t_points___), -instance(put(b2, b3), singleton_t_points___), -instance(b2, singleton_t_points___), -instance(put(b3, b1), singleton_t_points___), -instance(b3, singleton_t_points___), -instance(put(b1, t), singleton_t_points___), -instance(put(b2, t), singleton_t_points___), -instance(t, singleton_t_points___), -instance(put(b1, b3), singleton_t_points___), -instance(true, singleton_t_points___), -instance(put(b1, b2), singleton_t_points___), -instance(put(b3, t), singleton_t_points___), -instance(put(b3, b2), singleton_t_points___), -instance(false, booleans), -instance(put(b2, b1), booleans), -instance(b1, booleans), -instance(put(b2, b3), booleans), -instance(b2, booleans), -instance(put(b3, b1), booleans), -instance(b3, booleans), -instance(put(b1, t), booleans), -instance(put(b2, t), booleans), -instance(t, booleans), -instance(put(b1, b3), booleans), -instance(true, booleans), -instance(put(b1, b2), booleans), -instance(put(b3, t), booleans), -instance(put(b3, b2), booleans), -instance(false, block), -instance(put(b2, b1), block), -instance(put(b2, b3), block), -instance(put(b3, b1), block), -instance(put(b1, t), block), -instance(put(b2, t), block), -instance(t, block), -instance(put(b1, b3), block), -instance(true, block), -instance(put(b1, b2), block), -instance(put(b3, t), block), -instance(put(b3, b2), block), -instance(false, actions), -instance(b1, actions), -instance(b2, actions), -instance(b3, actions), -instance(t, actions), -instance(true, actions), -instance(false, put), -instance(b1, put), -instance(b2, put), -instance(b3, put), -instance(t, put), -instance(true, put), -instance(false, integers), -instance(put(b2, b1), integers), -instance(b1, integers), -instance(put(b2, b3), integers), -instance(b2, integers), -instance(put(b3, b1), integers), -instance(b3, integers), -instance(put(b1, t), integers), -instance(put(b2, t), integers), -instance(t, integers), -instance(put(b1, b3), integers), -instance(true, integers), -instance(put(b1, b2), integers), -instance(put(b3, t), integers), -instance(put(b3, b2), integers), -instance(false, points), -instance(put(b2, b1), points), -instance(put(b2, b3), points), -instance(put(b3, b1), points), -instance(put(b1, t), points), -instance(put(b2, t), points), -instance(put(b1, b3), points), -instance(true, points), -instance(put(b1, b2), points), -instance(put(b3, t), points), -instance(put(b3, b2), points), -instance(false, agents), -instance(put(b2, b1), agents), -instance(put(b2, b3), agents), -instance(put(b3, b1), agents), -instance(put(b1, t), agents), -instance(put(b2, t), agents), -instance(t, agents), -instance(put(b1, b3), agents), -instance(true, agents), -instance(put(b1, b2), agents), -instance(put(b3, t), agents), -instance(put(b3, b2), agents)
,dom_move_actor(put(b2, t)), dom_move_actor(put(b2, b1)), dom_move_actor(put(b2, b3)), dom_move_actor(put(b3, b1)), dom_move_actor(put(b3, t)), dom_move_actor(put(b3, b2)), dom_move_actor(put(b1, t)), dom_move_actor(put(b1, b3)), dom_move_actor(put(b1, b2))
,sink(timeStep), sink(universe), sink(booleans), sink(integers), -sink(move), -sink(things), -sink(singleton_t_points___), -sink(block), -sink(actions), -sink(put), -sink(points), -sink(agents)
,-dom_transitive_connectivity
,link(points, universe), link(block, points), link(singleton_t_points___, points), link(things, universe), link(agents, things), link(block, agents), link(actions, universe), link(move, actions), link(put, move), -link(move, move), -link(move, timeStep), -link(move, universe), -link(move, things), -link(move, singleton_t_points___), -link(move, booleans), -link(move, block), -link(move, put), -link(move, integers), -link(move, points), -link(move, agents), -link(timeStep, move), -link(timeStep, timeStep), -link(timeStep, universe), -link(timeStep, things), -link(timeStep, singleton_t_points___), -link(timeStep, booleans), -link(timeStep, block), -link(timeStep, actions), -link(timeStep, put), -link(timeStep, integers), -link(timeStep, points), -link(timeStep, agents), -link(universe, move), -link(universe, timeStep), -link(universe, universe), -link(universe, things), -link(universe, singleton_t_points___), -link(universe, booleans), -link(universe, block), -link(universe, actions), -link(universe, put), -link(universe, integers), -link(universe, points), -link(universe, agents), -link(things, move), -link(things, timeStep), -link(things, things), -link(things, singleton_t_points___), -link(things, booleans), -link(things, block), -link(things, actions), -link(things, put), -link(things, integers), -link(things, points), -link(things, agents), -link(singleton_t_points___, move), -link(singleton_t_points___, timeStep), -link(singleton_t_points___, universe), -link(singleton_t_points___, things), -link(singleton_t_points___, singleton_t_points___), -link(singleton_t_points___, booleans), -link(singleton_t_points___, block), -link(singleton_t_points___, actions), -link(singleton_t_points___, put), -link(singleton_t_points___, integers), -link(singleton_t_points___, agents), -link(booleans, move), -link(booleans, timeStep), -link(booleans, universe), -link(booleans, things), -link(booleans, singleton_t_points___), -link(booleans, booleans), -link(booleans, block), -link(booleans, actions), -link(booleans, put), -link(booleans, integers), -link(booleans, points), -link(booleans, agents), -link(block, move), -link(block, timeStep), -link(block, universe), -link(block, things), -link(block, singleton_t_points___), -link(block, booleans), -link(block, block), -link(block, actions), -link(block, put), -link(block, integers), -link(actions, move), -link(actions, timeStep), -link(actions, things), -link(actions, singleton_t_points___), -link(actions, booleans), -link(actions, block), -link(actions, actions), -link(actions, put), -link(actions, integers), -link(actions, points), -link(actions, agents), -link(put, timeStep), -link(put, universe), -link(put, things), -link(put, singleton_t_points___), -link(put, booleans), -link(put, block), -link(put, actions), -link(put, put), -link(put, integers), -link(put, points), -link(put, agents), -link(integers, move), -link(integers, timeStep), -link(integers, universe), -link(integers, things), -link(integers, singleton_t_points___), -link(integers, booleans), -link(integers, block), -link(integers, actions), -link(integers, put), -link(integers, integers), -link(integers, points), -link(integers, agents), -link(points, move), -link(points, timeStep), -link(points, things), -link(points, singleton_t_points___), -link(points, booleans), -link(points, block), -link(points, actions), -link(points, put), -link(points, integers), -link(points, points), -link(points, agents), -link(agents, move), -link(agents, timeStep), -link(agents, universe), -link(agents, singleton_t_points___), -link(agents, booleans), -link(agents, block), -link(agents, actions), -link(agents, put), -link(agents, integers), -link(agents, points), -link(agents, agents)
,has_parent(points), has_parent(block), has_parent(singleton_t_points___), has_parent(things), has_parent(agents), has_parent(actions), has_parent(move), has_parent(put), -has_parent(timeStep), -has_parent(universe), -has_parent(booleans), -has_parent(integers)
,source(timeStep), source(singleton_t_points___), source(booleans), source(block), source(put), source(integers), -source(move), -source(universe), -source(things), -source(actions), -source(points), -source(agents)
,occurs(put(b2, b3), 1), occurs(put(b1, b2), 2)
,dom_move_dest(put(b1, b2)), dom_move_dest(put(b3, b2)), dom_move_dest(put(b1, b3)), dom_move_dest(put(b2, b3)), dom_move_dest(put(b1, t)), dom_move_dest(put(b2, t)), dom_move_dest(put(b3, t)), dom_move_dest(put(b3, b1)), dom_move_dest(put(b2, b1))
,happened(put(b2, b3), 1), happened(put(b1, b2), 2)
,observed(location(b1), t, 0), observed(location(b2), t, 0), observed(location(b3), t, 0)
,subsort(points, universe), subsort(block, points), subsort(singleton_t_points___, points), subsort(things, universe), subsort(agents, things), subsort(block, agents), subsort(actions, universe), subsort(move, actions), subsort(put, move), subsort(block, universe), subsort(singleton_t_points___, universe), subsort(agents, universe), subsort(block, things), subsort(move, universe), subsort(put, actions), subsort(put, universe), -subsort(move, move), -subsort(timeStep, move), -subsort(universe, move), -subsort(things, move), -subsort(singleton_t_points___, move), -subsort(booleans, move), -subsort(block, move), -subsort(actions, move), -subsort(integers, move), -subsort(points, move), -subsort(agents, move), -subsort(move, timeStep), -subsort(timeStep, timeStep), -subsort(universe, timeStep), -subsort(things, timeStep), -subsort(singleton_t_points___, timeStep), -subsort(booleans, timeStep), -subsort(block, timeStep), -subsort(actions, timeStep), -subsort(put, timeStep), -subsort(integers, timeStep), -subsort(points, timeStep), -subsort(agents, timeStep), -subsort(timeStep, universe), -subsort(universe, universe), -subsort(booleans, universe), -subsort(integers, universe), -subsort(move, things), -subsort(timeStep, things), -subsort(universe, things), -subsort(things, things), -subsort(singleton_t_points___, things), -subsort(booleans, things), -subsort(actions, things), -subsort(put, things), -subsort(integers, things), -subsort(points, things), -subsort(move, singleton_t_points___), -subsort(timeStep, singleton_t_points___), -subsort(universe, singleton_t_points___), -subsort(things, singleton_t_points___), -subsort(singleton_t_points___, singleton_t_points___), -subsort(booleans, singleton_t_points___), -subsort(block, singleton_t_points___), -subsort(actions, singleton_t_points___), -subsort(put, singleton_t_points___), -subsort(integers, singleton_t_points___), -subsort(points, singleton_t_points___), -subsort(agents, singleton_t_points___), -subsort(move, booleans), -subsort(timeStep, booleans), -subsort(universe, booleans), -subsort(things, booleans), -subsort(singleton_t_points___, booleans), -subsort(booleans, booleans), -subsort(block, booleans), -subsort(actions, booleans), -subsort(put, booleans), -subsort(integers, booleans), -subsort(points, booleans), -subsort(agents, booleans), -subsort(move, block), -subsort(timeStep, block), -subsort(universe, block), -subsort(things, block), -subsort(singleton_t_points___, block), -subsort(booleans, block), -subsort(block, block), -subsort(actions, block), -subsort(put, block), -subsort(integers, block), -subsort(points, block), -subsort(agents, block), -subsort(timeStep, actions), -subsort(universe, actions), -subsort(things, actions), -subsort(singleton_t_points___, actions), -subsort(booleans, actions), -subsort(block, actions), -subsort(actions, actions), -subsort(integers, actions), -subsort(points, actions), -subsort(agents, actions), -subsort(move, put), -subsort(timeStep, put), -subsort(universe, put), -subsort(things, put), -subsort(singleton_t_points___, put), -subsort(booleans, put), -subsort(block, put), -subsort(actions, put), -subsort(put, put), -subsort(integers, put), -subsort(points, put), -subsort(agents, put), -subsort(move, integers), -subsort(timeStep, integers), -subsort(universe, integers), -subsort(things, integers), -subsort(singleton_t_points___, integers), -subsort(booleans, integers), -subsort(block, integers), -subsort(actions, integers), -subsort(put, integers), -subsort(integers, integers), -subsort(points, integers), -subsort(agents, integers), -subsort(move, points), -subsort(timeStep, points), -subsort(universe, points), -subsort(things, points), -subsort(booleans, points), -subsort(actions, points), -subsort(put, points), -subsort(integers, points), -subsort(points, points), -subsort(agents, points), -subsort(move, agents), -subsort(timeStep, agents), -subsort(universe, agents), -subsort(things, agents), -subsort(singleton_t_points___, agents), -subsort(booleans, agents), -subsort(actions, agents), -subsort(put, agents), -subsort(integers, agents), -subsort(points, agents), -subsort(agents, agents)
,connected(b2, b2, 0), connected(b2, b2, 1), connected(b2, b2, 2), connected(b2, b2, 3), connected(b2, b2, 4), connected(b2, b2, 5), connected(b3, b3, 0), connected(b3, b3, 1), connected(b3, b3, 2), connected(b3, b3, 3), connected(b3, b3, 4), connected(b3, b3, 5), connected(t, t, 0), connected(t, t, 1), connected(t, t, 2), connected(t, t, 3), connected(t, t, 4), connected(t, t, 5), connected(b1, b1, 0), connected(b1, b1, 1), connected(b1, b1, 2), connected(b1, b1, 3), connected(b1, b1, 4), connected(b1, b1, 5)
,move_actor(put(b2, t), b2), move_actor(put(b2, b1), b2), move_actor(put(b2, b3), b2), move_actor(put(b3, b1), b3), move_actor(put(b3, t), b3), move_actor(put(b3, b2), b3), move_actor(put(b1, t), b1), move_actor(put(b1, b3), b1), move_actor(put(b1, b2), b1)
,-dom_symmetric_connectivity
,-dom_move_origin(put(b3, b1)), -dom_move_origin(put(b1, t)), -dom_move_origin(put(b2, t)), -dom_move_origin(put(b1, b3)), -dom_move_origin(put(b1, b2)), -dom_move_origin(put(b3, t)), -dom_move_origin(put(b2, b1)), -dom_move_origin(put(b3, b2)), -dom_move_origin(put(b2, b3))
,above(b2, b3, 2), above(b2, t, 0), above(b2, b3, 3), above(b2, t, 1), above(b2, b3, 4), above(b2, t, 2), above(b2, b3, 5), above(b2, t, 3), above(b2, t, 4), above(b2, t, 5), above(b3, t, 0), above(b3, t, 1), above(b3, t, 2), above(b3, t, 3), above(b3, t, 4), above(b3, t, 5), above(b1, b2, 3), above(b1, t, 0), above(b1, b2, 4), above(b1, t, 1), above(b1, b2, 5), above(b1, t, 2), above(b1, t, 3), above(b1, t, 4), above(b1, t, 5), above(b1, b3, 3), above(b1, b3, 4), above(b1, b3, 5), -above(b2, b2, 0), -above(b2, b2, 1), -above(b2, b2, 2), -above(b2, b2, 3), -above(b2, b2, 4), -above(b2, b2, 5), -above(b2, b3, 0), -above(b2, b3, 1), -above(b2, b1, 0), -above(b2, b1, 1), -above(b2, b1, 2), -above(b2, b1, 3), -above(b2, b1, 4), -above(b2, b1, 5), -above(b3, b2, 0), -above(b3, b2, 1), -above(b3, b2, 2), -above(b3, b2, 3), -above(b3, b2, 4), -above(b3, b2, 5), -above(b3, b3, 0), -above(b3, b3, 1), -above(b3, b3, 2), -above(b3, b3, 3), -above(b3, b3, 4), -above(b3, b3, 5), -above(b3, b1, 0), -above(b3, b1, 1), -above(b3, b1, 2), -above(b3, b1, 3), -above(b3, b1, 4), -above(b3, b1, 5), -above(b1, b2, 0), -above(b1, b2, 1), -above(b1, b2, 2), -above(b1, b3, 0), -above(b1, b3, 1), -above(b1, b3, 2), -above(b1, b1, 0), -above(b1, b1, 1), -above(b1, b1, 2), -above(b1, b1, 3), -above(b1, b1, 4), -above(b1, b1, 5)
,move_dest(put(b3, b1), b1), move_dest(put(b1, t), t), move_dest(put(b2, t), t), move_dest(put(b1, b3), b3), move_dest(put(b1, b2), b2), move_dest(put(b3, t), t), move_dest(put(b2, b1), b1), move_dest(put(b3, b2), b2), move_dest(put(b2, b3), b3)
,dom_location(b2, 2), dom_location(b1, 3), dom_location(b1, 0), dom_location(b2, 0), dom_location(b3, 0), dom_location(b2, 3), dom_location(b1, 4), dom_location(b1, 1), dom_location(b2, 1), dom_location(b3, 1), dom_location(b2, 4), dom_location(b1, 5), dom_location(b1, 2), dom_location(b3, 2), dom_location(b2, 5), dom_location(b3, 3), dom_location(b3, 4), dom_location(b3, 5)
,location(b2, b3, 2), location(b1, b2, 3), location(b1, t, 0), location(b2, t, 0), location(b3, t, 0), location(b2, b3, 3), location(b1, b2, 4), location(b1, t, 1), location(b2, t, 1), location(b3, t, 1), location(b2, b3, 4), location(b1, b2, 5), location(b1, t, 2), location(b3, t, 2), location(b2, b3, 5), location(b3, t, 3), location(b3, t, 4), location(b3, t, 5), -location(b2, b2, 2), -location(b2, t, 2), -location(b2, b1, 2), -location(b2, b2, 0), -location(b2, b3, 0), -location(b2, b1, 0), -location(b2, b2, 3), -location(b2, t, 3), -location(b2, b1, 3), -location(b2, b2, 1), -location(b2, b3, 1), -location(b2, b1, 1), -location(b2, b2, 4), -location(b2, t, 4), -location(b2, b1, 4), -location(b2, b2, 5), -location(b2, t, 5), -location(b2, b1, 5), -location(b3, b2, 0), -location(b3, b3, 0), -location(b3, b1, 0), -location(b3, b2, 1), -location(b3, b3, 1), -location(b3, b1, 1), -location(b3, b2, 2), -location(b3, b3, 2), -location(b3, b1, 2), -location(b3, b2, 3), -location(b3, b3, 3), -location(b3, b1, 3), -location(b3, b2, 4), -location(b3, b3, 4), -location(b3, b1, 4), -location(b3, b2, 5), -location(b3, b3, 5), -location(b3, b1, 5), -location(b1, b3, 3), -location(b1, t, 3), -location(b1, b1, 3), -location(b1, b2, 0), -location(b1, b3, 0), -location(b1, b1, 0), -location(b1, b3, 4), -location(b1, t, 4), -location(b1, b1, 4), -location(b1, b2, 1), -location(b1, b3, 1), -location(b1, b1, 1), -location(b1, b3, 5), -location(b1, t, 5), -location(b1, b1, 5), -location(b1, b2, 2), -location(b1, b3, 2), -location(b1, b1, 2)
,has_child(universe), has_child(points), has_child(things), has_child(agents), has_child(actions), has_child(move), -has_child(timeStep), -has_child(singleton_t_points___), -has_child(booleans), -has_child(block), -has_child(put), -has_child(integers)
,dom_connected(b2, b2, 0), dom_connected(b2, b2, 1), dom_connected(b2, b2, 2), dom_connected(b2, b2, 3), dom_connected(b2, b2, 4), dom_connected(b2, b2, 5), dom_connected(b3, b3, 0), dom_connected(b3, b3, 1), dom_connected(b3, b3, 2), dom_connected(b3, b3, 3), dom_connected(b3, b3, 4), dom_connected(b3, b3, 5), dom_connected(t, t, 0), dom_connected(t, t, 1), dom_connected(t, t, 2), dom_connected(t, t, 3), dom_connected(t, t, 4), dom_connected(t, t, 5), dom_connected(b1, b1, 0), dom_connected(b1, b1, 1), dom_connected(b1, b1, 2), dom_connected(b1, b1, 3), dom_connected(b1, b1, 4), dom_connected(b1, b1, 5)
,is_a(t, points), is_a(b1, block), is_a(b2, block), is_a(b3, block), is_a(put(b2, b1), put), is_a(put(b3, b1), put), is_a(put(b1, b2), put), is_a(put(b3, b2), put), is_a(put(b2, b3), put), is_a(put(b1, b3), put), is_a(put(b1, t), put), is_a(put(b2, t), put), is_a(put(b3, t), put), -is_a(false, move), -is_a(put(b2, b1), move), -is_a(b1, move), -is_a(put(b2, b3), move), -is_a(b2, move), -is_a(put(b3, b1), move), -is_a(b3, move), -is_a(put(b1, t), move), -is_a(put(b2, t), move), -is_a(t, move), -is_a(put(b1, b3), move), -is_a(true, move), -is_a(put(b1, b2), move), -is_a(put(b3, t), move), -is_a(put(b3, b2), move), -is_a(false, timeStep), -is_a(put(b2, b1), timeStep), -is_a(b1, timeStep), -is_a(put(b2, b3), timeStep), -is_a(b2, timeStep), -is_a(put(b3, b1), timeStep), -is_a(b3, timeStep), -is_a(put(b1, t), timeStep), -is_a(put(b2, t), timeStep), -is_a(t, timeStep), -is_a(put(b1, b3), timeStep), -is_a(true, timeStep), -is_a(put(b1, b2), timeStep), -is_a(put(b3, t), timeStep), -is_a(put(b3, b2), timeStep), -is_a(false, universe), -is_a(put(b2, b1), universe), -is_a(b1, universe), -is_a(put(b2, b3), universe), -is_a(b2, universe), -is_a(put(b3, b1), universe), -is_a(b3, universe), -is_a(put(b1, t), universe), -is_a(put(b2, t), universe), -is_a(t, universe), -is_a(put(b1, b3), universe), -is_a(true, universe), -is_a(put(b1, b2), universe), -is_a(put(b3, t), universe), -is_a(put(b3, b2), universe), -is_a(false, things), -is_a(put(b2, b1), things), -is_a(b1, things), -is_a(put(b2, b3), things), -is_a(b2, things), -is_a(put(b3, b1), things), -is_a(b3, things), -is_a(put(b1, t), things), -is_a(put(b2, t), things), -is_a(t, things), -is_a(put(b1, b3), things), -is_a(true, things), -is_a(put(b1, b2), things), -is_a(put(b3, t), things), -is_a(put(b3, b2), things), -is_a(false, singleton_t_points___), -is_a(put(b2, b1), singleton_t_points___), -is_a(b1, singleton_t_points___), -is_a(put(b2, b3), singleton_t_points___), -is_a(b2, singleton_t_points___), -is_a(put(b3, b1), singleton_t_points___), -is_a(b3, singleton_t_points___), -is_a(put(b1, t), singleton_t_points___), -is_a(put(b2, t), singleton_t_points___), -is_a(t, singleton_t_points___), -is_a(put(b1, b3), singleton_t_points___), -is_a(true, singleton_t_points___), -is_a(put(b1, b2), singleton_t_points___), -is_a(put(b3, t), singleton_t_points___), -is_a(put(b3, b2), singleton_t_points___), -is_a(false, booleans), -is_a(put(b2, b1), booleans), -is_a(b1, booleans), -is_a(put(b2, b3), booleans), -is_a(b2, booleans), -is_a(put(b3, b1), booleans), -is_a(b3, booleans), -is_a(put(b1, t), booleans), -is_a(put(b2, t), booleans), -is_a(t, booleans), -is_a(put(b1, b3), booleans), -is_a(true, booleans), -is_a(put(b1, b2), booleans), -is_a(put(b3, t), booleans), -is_a(put(b3, b2), booleans), -is_a(false, block), -is_a(put(b2, b1), block), -is_a(put(b2, b3), block), -is_a(put(b3, b1), block), -is_a(put(b1, t), block), -is_a(put(b2, t), block), -is_a(t, block), -is_a(put(b1, b3), block), -is_a(true, block), -is_a(put(b1, b2), block), -is_a(put(b3, t), block), -is_a(put(b3, b2), block), -is_a(false, actions), -is_a(put(b2, b1), actions), -is_a(b1, actions), -is_a(put(b2, b3), actions), -is_a(b2, actions), -is_a(put(b3, b1), actions), -is_a(b3, actions), -is_a(put(b1, t), actions), -is_a(put(b2, t), actions), -is_a(t, actions), -is_a(put(b1, b3), actions), -is_a(true, actions), -is_a(put(b1, b2), actions), -is_a(put(b3, t), actions), -is_a(put(b3, b2), actions), -is_a(false, put), -is_a(b1, put), -is_a(b2, put), -is_a(b3, put), -is_a(t, put), -is_a(true, put), -is_a(false, integers), -is_a(put(b2, b1), integers), -is_a(b1, integers), -is_a(put(b2, b3), integers), -is_a(b2, integers), -is_a(put(b3, b1), integers), -is_a(b3, integers), -is_a(put(b1, t), integers), -is_a(put(b2, t), integers), -is_a(t, integers), -is_a(put(b1, b3), integers), -is_a(true, integers), -is_a(put(b1, b2), integers), -is_a(put(b3, t), integers), -is_a(put(b3, b2), integers), -is_a(false, points), -is_a(put(b2, b1), points), -is_a(b1, points), -is_a(put(b2, b3), points), -is_a(b2, points), -is_a(put(b3, b1), points), -is_a(b3, points), -is_a(put(b1, t), points), -is_a(put(b2, t), points), -is_a(put(b1, b3), points), -is_a(true, points), -is_a(put(b1, b2), points), -is_a(put(b3, t), points), -is_a(put(b3, b2), points), -is_a(false, agents), -is_a(put(b2, b1), agents), -is_a(b1, agents), -is_a(put(b2, b3), agents), -is_a(b2, agents), -is_a(put(b3, b1), agents), -is_a(b3, agents), -is_a(put(b1, t), agents), -is_a(put(b2, t), agents), -is_a(t, agents), -is_a(put(b1, b3), agents), -is_a(true, agents), -is_a(put(b1, b2), agents), -is_a(put(b3, t), agents), -is_a(put(b3, b2), agents)
}

