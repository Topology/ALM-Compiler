% Answer Set 1 of 1
{
-transitive_connectivity
has_parent(points), has_parent(actions), has_parent(move), has_parent(things), has_parent(agents), -has_parent(timeStep), -has_parent(universe), -has_parent(booleans), -has_parent(integers)
move_actor(go(bob, rome, new_york), bob), move_actor(go(bob, new_york, rome), bob), move_actor(go(bob, paris, rome), bob), move_actor(go(bob, paris, new_york), bob), move_actor(go(bob, rome, paris), bob), move_actor(go(bob, new_york, paris), bob), move_actor(go(john, rome, paris), john), move_actor(go(john, rome, new_york), john), move_actor(go(john, new_york, paris), john), move_actor(go(john, paris, rome), john), move_actor(go(john, new_york, rome), john), move_actor(go(john, paris, new_york), john), move_actor(go(bob, paris), bob), move_actor(go(bob, new_york), bob), move_actor(go(bob, rome), bob), move_actor(go(john, new_york), john), move_actor(go(john, rome), john), move_actor(go(john, paris), john)
move_dest(go(bob, new_york, rome), rome), move_dest(go(bob, paris, rome), rome), move_dest(go(john, paris, rome), rome), move_dest(go(john, new_york, rome), rome), move_dest(go(john, rome, paris), paris), move_dest(go(john, new_york, paris), paris), move_dest(go(bob, rome, paris), paris), move_dest(go(bob, new_york, paris), paris), move_dest(go(bob, rome, new_york), new_york), move_dest(go(john, rome, new_york), new_york), move_dest(go(bob, paris, new_york), new_york), move_dest(go(john, paris, new_york), new_york), move_dest(go(john, rome), rome), move_dest(go(bob, rome), rome), move_dest(go(bob, paris), paris), move_dest(go(john, paris), paris), move_dest(go(john, new_york), new_york), move_dest(go(bob, new_york), new_york)
link(points, universe), link(actions, universe), link(move, actions), link(things, universe), link(agents, things)
has_child(universe), has_child(actions), has_child(things), -has_child(move), -has_child(timeStep), -has_child(booleans), -has_child(integers), -has_child(points), -has_child(agents)
sink(timeStep), sink(universe), sink(booleans), sink(integers), -sink(move), -sink(things), -sink(actions), -sink(points), -sink(agents)
is_a(bob, agents), is_a(john, agents), is_a(new_york, points), is_a(paris, points), is_a(rome, points), is_a(go(john, new_york, paris), move), is_a(go(bob, paris, new_york), move), is_a(go(john, new_york, rome), move), is_a(go(bob, rome, paris), move), is_a(go(bob, rome, new_york), move), is_a(go(bob, new_york, rome), move), is_a(go(john, rome, paris), move), is_a(go(bob, paris, rome), move), is_a(go(john, rome, new_york), move), is_a(go(john, paris, rome), move), is_a(go(bob, new_york, paris), move), is_a(go(john, paris, new_york), move), is_a(go(john, rome), move), is_a(go(bob, rome), move), is_a(go(john, paris), move), is_a(go(bob, paris), move), is_a(go(john, new_york), move), is_a(go(bob, new_york), move)
symmetric_connectivity
source(move), source(timeStep), source(booleans), source(integers), source(points), source(agents), -source(universe), -source(things), -source(actions)
move_origin(go(bob, rome, new_york), rome), move_origin(go(john, rome, paris), rome), move_origin(go(john, rome, new_york), rome), move_origin(go(bob, rome, paris), rome), move_origin(go(bob, paris, rome), paris), move_origin(go(john, paris, rome), paris), move_origin(go(bob, paris, new_york), paris), move_origin(go(john, paris, new_york), paris), move_origin(go(bob, new_york, rome), new_york), move_origin(go(john, new_york, paris), new_york), move_origin(go(john, new_york, rome), new_york), move_origin(go(bob, new_york, paris), new_york)
instance(bob, agents), instance(john, agents), instance(new_york, points), instance(paris, points), instance(rome, points), instance(go(john, new_york, paris), move), instance(go(bob, paris, new_york), move), instance(go(john, new_york, rome), move), instance(go(bob, rome, paris), move), instance(go(bob, rome, new_york), move), instance(go(bob, new_york, rome), move), instance(go(john, rome, paris), move), instance(go(bob, paris, rome), move), instance(go(john, rome, new_york), move), instance(go(john, paris, rome), move), instance(go(bob, new_york, paris), move), instance(go(john, paris, new_york), move), instance(go(john, rome), move), instance(go(bob, rome), move), instance(go(john, paris), move), instance(go(bob, paris), move), instance(go(john, new_york), move), instance(go(bob, new_york), move), instance(bob, things), instance(john, things), instance(new_york, universe), instance(paris, universe), instance(rome, universe), instance(go(john, new_york, paris), actions), instance(go(bob, paris, new_york), actions), instance(go(john, new_york, rome), actions), instance(go(bob, rome, paris), actions), instance(go(bob, rome, new_york), actions), instance(go(bob, new_york, rome), actions), instance(go(john, rome, paris), actions), instance(go(bob, paris, rome), actions), instance(go(john, rome, new_york), actions), instance(go(john, paris, rome), actions), instance(go(bob, new_york, paris), actions), instance(go(john, paris, new_york), actions), instance(go(john, rome), actions), instance(go(bob, rome), actions), instance(go(john, paris), actions), instance(go(bob, paris), actions), instance(go(john, new_york), actions), instance(go(bob, new_york), actions), instance(bob, universe), instance(john, universe), instance(go(john, new_york, paris), universe), instance(go(bob, paris, new_york), universe), instance(go(john, new_york, rome), universe), instance(go(bob, rome, paris), universe), instance(go(bob, rome, new_york), universe), instance(go(bob, new_york, rome), universe), instance(go(john, rome, paris), universe), instance(go(bob, paris, rome), universe), instance(go(john, rome, new_york), universe), instance(go(john, paris, rome), universe), instance(go(bob, new_york, paris), universe), instance(go(john, paris, new_york), universe), instance(go(john, rome), universe), instance(go(bob, rome), universe), instance(go(john, paris), universe), instance(go(bob, paris), universe), instance(go(john, new_york), universe), instance(go(bob, new_york), universe)
subsort(points, universe), subsort(actions, universe), subsort(move, actions), subsort(things, universe), subsort(agents, things), subsort(move, universe), subsort(agents, universe), -subsort(move, move), -subsort(move, timeStep), -subsort(move, things), -subsort(move, booleans), -subsort(move, integers), -subsort(move, points), -subsort(move, agents), -subsort(timeStep, move), -subsort(timeStep, timeStep), -subsort(timeStep, universe), -subsort(timeStep, things), -subsort(timeStep, booleans), -subsort(timeStep, actions), -subsort(timeStep, integers), -subsort(timeStep, points), -subsort(timeStep, agents), -subsort(universe, move), -subsort(universe, timeStep), -subsort(universe, universe), -subsort(universe, things), -subsort(universe, booleans), -subsort(universe, actions), -subsort(universe, integers), -subsort(universe, points), -subsort(universe, agents), -subsort(things, move), -subsort(things, timeStep), -subsort(things, things), -subsort(things, booleans), -subsort(things, actions), -subsort(things, integers), -subsort(things, points), -subsort(things, agents), -subsort(booleans, move), -subsort(booleans, timeStep), -subsort(booleans, universe), -subsort(booleans, things), -subsort(booleans, booleans), -subsort(booleans, actions), -subsort(booleans, integers), -subsort(booleans, points), -subsort(booleans, agents), -subsort(actions, move), -subsort(actions, timeStep), -subsort(actions, things), -subsort(actions, booleans), -subsort(actions, actions), -subsort(actions, integers), -subsort(actions, points), -subsort(actions, agents), -subsort(integers, move), -subsort(integers, timeStep), -subsort(integers, universe), -subsort(integers, things), -subsort(integers, booleans), -subsort(integers, actions), -subsort(integers, integers), -subsort(integers, points), -subsort(integers, agents), -subsort(points, move), -subsort(points, timeStep), -subsort(points, things), -subsort(points, booleans), -subsort(points, actions), -subsort(points, integers), -subsort(points, points), -subsort(points, agents), -subsort(agents, move), -subsort(agents, timeStep), -subsort(agents, booleans), -subsort(agents, actions), -subsort(agents, integers), -subsort(agents, points), -subsort(agents, agents)
}

