% Pre Model Program
% Automatically Generated By ALM Translator 0.1.0.


sorts

% Source Sort
#actions = {}.

#universe = #actions.

#sort_hierarchy_nodes_ = {universe, actions, booleans, integers}.



predicates

% static function
subsort(#sort_hierarchy_nodes_, #sort_hierarchy_nodes_).

% static function
instance(#universe, #sort_hierarchy_nodes_).

% static function
sink(#sort_hierarchy_nodes_).

% static function
link(#sort_hierarchy_nodes_, #sort_hierarchy_nodes_).

% static function
has_parent(#sort_hierarchy_nodes_).

% static function
has_child(#sort_hierarchy_nodes_).

% static function
source(#sort_hierarchy_nodes_).

% special function
occurs(#actions).

% static function
is_a(#universe, #sort_hierarchy_nodes_).



rules

%---------------------
%-- Section: link
%---------------------

% [actions] is a child sort of [universe]
link(actions, universe).

%---------------------
%-- Section: instance
%---------------------

% Base case of [instance] relation.
% If X is a Y then X is an instance of Y.
instance(X, Y) :- is_a(X, Y).

% Closure On [instance] relation.
% X is an instance of Z if X is an instance of Y and there is a link from Y to Z.
instance(X, Z) :- instance(X, Y), link(Y, Z).

%---------------------
%-- Section: subsort
%---------------------

% Base case of [subsort] relation.
% If there is a link from X to Y in the sort hierarchy then X is a subsort of Y.
subsort(X, Y) :- link(X, Y).

% Closure On [subsort] relation.
% X is a subsort of Z if there is a link from X to Y and Y is a subsort of Z.
subsort(X, Z) :- link(X, Y), subsort(Y, Z).

% [subsort] needs the closed world assumption since it is a total boolean function.
-subsort(X, Y) :- not subsort(X, Y).

%---------------------
%-- Section: has_parent
%---------------------

% Sort X has a parent in the hierarchy if there is a link from X to some sort Y.
has_parent(X) :- link(X, Y).

% [has_parent] needs the closed world assumption since it is a total boolean function.
-has_parent(X) :- not has_parent(X).

%---------------------
%-- Section: has_child
%---------------------

% X has a child in the hierarchy if there is a link from some sort Y to X.
has_child(X) :- link(Y, X).

% [has_child] needs the closed world assumption since it is a total boolean function.
-has_child(X) :- not has_child(X).

%---------------------
%-- Section: source
%---------------------

% If sort X has no child sort, X is a source sort
source(X) :- -has_child(X).

% [source] needs the closed world assumption since it is a total boolean function.
-source(X) :- not source(X).

%---------------------
%-- Section: sink
%---------------------

% If sort X has no parent sort, X is a sink sort
sink(X) :- -has_parent(X).

% [sink] needs the closed world assumption since it is a total boolean function.
-sink(X) :- not sink(X).

%---------------------
%-- Section: Axioms - State Constraints With Only Static Functions
%---------------------

% There are no rules in this section.

%---------------------
%-- Section: Axioms - Satic Function Definitions
%---------------------

% There are no rules in this section.

%---------------------
%-- Section: Structure - Sort Instances
%---------------------

% There are no rules in this section.

%---------------------
%-- Section: Structure - Attribute Definitions
%---------------------

% There are no rules in this section.

%---------------------
%-- Section: Structure - Static Function Definitions
%---------------------

% There are no rules in this section.

% END OF PROGRAM
